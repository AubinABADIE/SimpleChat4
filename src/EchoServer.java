// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.io.IOException;import java.util.Observable;import java.util.Observer;import com.lloseng.ocsf.server.ConnectionToClient;import com.lloseng.ocsf.server.ObservableOriginatorServer;import com.lloseng.ocsf.server.ObservableServer;import com.lloseng.ocsf.server.OriginatorMessage;/** * This class overrides some of the methods in the abstract superclass in order * to give more functionality to the server. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @author Fran&ccedil;ois B&eacute;langer * @author Paul Holden * @version July 2000 */public class EchoServer implements Observer {	// Class variables *************************************************	/**	 * The default port to listen on.	 */	final public static int DEFAULT_PORT = 5555;	private ObservableOriginatorServer oServer;	// Constructors ****************************************************	/**	 * Constructs an instance of the echo server.	 *	 * @param port The port number to connect on.	 */	public EchoServer(int port) {		oServer = new ObservableOriginatorServer(port);		oServer.addObserver(this);	}	// Instance methods ************************************************	/**	 * This method handles any messages received from the client.	 *	 * @param msg    The message received from the client.	 * @param client The connection from which the message originated.	 */	public void handleMessageFromClient(Object msg, ConnectionToClient client) {		if (!((String)msg).contains("#login") && client.getInfo("id") == null) {			System.out.println("You have to connect.");			try {				client.close();			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		} else {						String[] parts = ((String) msg).split(" ");						if (parts[0].equals("#logoff")) {				try {					client.close();				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			} else if (parts[0].equals("#login")) {				if (client.getInfo("id") != null) {					try {						client.sendToClient("You're already connected.");					} catch (IOException e) {						// TODO Auto-generated catch block						e.printStackTrace();					}				} else {					client.setInfo("id", parts[1]);					System.out.println(client.getInfo("id") + "> " + msg);				}			} else {				System.out.println("Message received: " + msg + " from " + client.getInfo("id"));				oServer.sendToAllClients(client.getInfo("id") + ">" + msg);			}		}	}	/**	 * This method handles all data coming from the UI	 *	 * @param message The message from the UI.	 */	public void handleMessageFromServerUI(String msg) {		String[] parts = ((String) msg).split(" ");		if (parts[0].equals("#quit")) {			try {				oServer.close();			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		} else if (parts[0].equals("#stop")) {			if (oServer.isListening()) {				oServer.stopListening();			} else {				System.out.println("The server already no listening.");			}		} else if (parts[0].equals("#close")) {			oServer.sendToAllClients("#kill");			if (oServer.isListening()) {				oServer.stopListening();			}			try {				oServer.close();			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		} else if (parts[0].equals("#setport")) {			if (!oServer.isListening()) {				oServer.setPort(Integer.parseInt(parts[1]));			} else {				System.out.println("Disconnect before changing port");			}		} else if (parts[0].equals("#start")) {			if (!oServer.isListening()) {				try {					oServer.listen();				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			}		} else if (parts[0].equals("#getport")) {			System.out.println(oServer.getPort());		} else {			oServer.sendToAllClients("Server MSG> " + msg);		}	}	/**	 * This method overrides the one in the superclass. Called when the server	 * starts listening for connections.	 */	protected void serverStarted() {		System.out.println("Server listening for connections on port " + oServer.getPort());	}	/**	 * This method overrides the one in the superclass. Called when the server stops	 * listening for connections.	 */	protected void serverStopped() {		System.out.println("Server has stopped listening for connections.");	}	protected void serverClosed() {		System.out.println("Server is closed.");	}	protected void clientConnected(ConnectionToClient client) {		System.out.println(client.getName() + " is connect");	}	synchronized protected void clientDisconnected(ConnectionToClient client) {		System.out.println(client.getName() + " is disconnect");	}	synchronized protected void clientException(ConnectionToClient client, Throwable exception) {		System.out.println("The connection with " + client.getName() + " is broken");	}	synchronized protected void listeningException(Throwable exception) {		System.out.println("Server is boken.");	}	@Override	public void update(Observable o, Object arg) {		if (arg instanceof OriginatorMessage) {			if (((OriginatorMessage)arg).getMessage().equals(ObservableServer.CLIENT_CONNECTED)) {				this.clientConnected(((OriginatorMessage)arg).getOriginator());			} else if (((OriginatorMessage)arg).getMessage().equals(ObservableServer.CLIENT_DISCONNECTED)) {				this.clientDisconnected(((OriginatorMessage)arg).getOriginator());			} else if (((OriginatorMessage)arg).getMessage().toString().contains(ObservableServer.CLIENT_EXCEPTION)){				this.clientException(((OriginatorMessage)arg).getOriginator(), new Exception(((OriginatorMessage)arg).getMessage().toString()));			} else if (((OriginatorMessage)arg).getMessage().toString().contains(ObservableServer.LISTENING_EXCEPTION)) {				this.listeningException(new Exception(((OriginatorMessage)arg).getMessage().toString()));			} else if (((OriginatorMessage)arg).getMessage().equals(ObservableServer.SERVER_STARTED)) {				this.serverStarted();			} else if (((OriginatorMessage)arg).getMessage().equals(ObservableServer.SERVER_STOPPED)) {				this.serverStopped();			} else if (((OriginatorMessage)arg).getMessage().equals(ObservableServer.SERVER_CLOSED)) {				this.serverClosed();			} else {				this.handleMessageFromClient(((OriginatorMessage)arg).getMessage(), ((OriginatorMessage)arg).getOriginator());			}		} else {			System.out.println("Not an Originator message.");		}	}}// End of EchoServer class