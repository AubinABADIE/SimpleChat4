// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import java.io.IOException;import java.util.Observable;import java.util.Observer;import com.lloseng.ocsf.client.ObservableClient;import common.ChatIF;/** * This class overrides some of the methods defined in the abstract superclass * in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer {	// Instance variables **********************************************	/**	 * The interface type variable. It allows the implementation of the display	 * method in the client.	 */	ChatIF clientUI;	private String id;	private ObservableClient obsClient;	// Constructors ****************************************************	/**	 * Constructs an instance of the chat client.	 *	 * @param host     The server to connect to.	 * @param port     The port number to connect on.	 * @param clientUI The interface type variable.	 */	public ChatClient(String id, String host, int port, ChatIF clientUI) throws IOException {		obsClient = new ObservableClient(host, port);		this.clientUI = clientUI;		this.id = id;		obsClient.addObserver(this);		handleMessageFromClientUI("#login " + this.id);	}		public String getId() {		return id;	}	// Instance methods ************************************************	/**	 * This method handles all data that comes in from the server.	 *	 * @param msg The message from the server.	 */	public void handleMessageFromServer(Object msg) {		if (msg instanceof String) {			String s = (String) msg;			if (s.equals("#kill")) {				try {					obsClient.closeConnection();				} catch (IOException e) {					// TODO Auto-generated catch block					e.printStackTrace();				}			} else {				clientUI.display(msg.toString());			}		}	}	/**	 * This method handles all data coming from the UI	 *	 * @param message The message from the UI.	 */	public void handleMessageFromClientUI(String message) {				String[] parts = message.split(" ");		if (parts[0].equals("#quit")) {			if (obsClient.isConnected()) {				try {					obsClient.sendToServer("#quit");				} catch (IOException e) {					e.printStackTrace();				}			}			quit();		} else if (parts[0].equals("#logoff")) {			if(obsClient.isConnected()) {				try {					obsClient.sendToServer("#logoff");					obsClient.closeConnection();				} catch (IOException e) {					e.printStackTrace();				}			} else {				System.out.println("You're not connected.");			}		} else if (parts[0].equals("#sethost")) {			if (!obsClient.isConnected()) {				obsClient.setHost(parts[1]);			} else {				System.out.println("Disconnect before changing host");			}		} else if (parts[0].equals("#setport")) {			if (!obsClient.isConnected()) {				obsClient.setPort(Integer.parseInt(parts[1]));			} else {				System.out.println("Disconnect before changing port");			}		} else if (parts[0].equals("#login")) {			if (!obsClient.isConnected()) {				try {					obsClient.openConnection();					this.id = parts[1];					obsClient.sendToServer("#login " + this.id);				} catch (IOException e) {					e.printStackTrace();				}			} else {				System.out.println("The client is already connected");			}		} else if (parts[0].equals("#getport")) {			if (obsClient.isConnected()) {				System.out.println(obsClient.getPort());			} else {				System.out.println("The client is not connected");			}		} else if (parts[0].equals("#gethost")) {			if (obsClient.isConnected()) {				System.out.println(obsClient.getHost());			} else {				System.out.println("The client is not connected");			}		} else {			try {				obsClient.sendToServer(message);			} catch (IOException e) {				clientUI.display("Could not send message to server.  Terminating client.");				quit();			}		}	}	/**	 * This method terminates the client.	 */	public void quit() {		try {			obsClient.closeConnection();		} catch (IOException e) {		}		System.exit(0);	}	protected void connectionEstablished() {		System.out.println("The connection with the server is established.");	}	protected void connectionClosed() {		System.out.println("The connection with the server has stopped");	}	protected void connectionException(Exception exception) {		System.out.println("The connection to the server is broken");	}	@Override	public void update(Observable o, Object arg) {		if (arg instanceof String) {			if (arg.equals(ObservableClient.CONNECTION_ESTABLISHED)) {				this.connectionEstablished();			} else if (arg.equals(ObservableClient.CONNECTION_CLOSED)) {				this.connectionClosed();			} else {				this.handleMessageFromServer(arg);			}		} else if (arg instanceof Exception) {			this.connectionException((Exception) arg);		}	}}// End of ChatClient class